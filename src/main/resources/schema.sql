CREATE TABLE IF NOT EXISTS users
(
    user_id  INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login    VARCHAR        NOT NULL,
    user_name VARCHAR,
    birthday DATE           NOT NULL,
    email    VARCHAR UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS friends
(
    user_id   INT REFERENCES users (user_id),
    friend_id INT REFERENCES users (user_id),
    PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS genre_names
(
    genre_id INT AUTO_INCREMENT PRIMARY KEY,
    genre_name VARCHAR NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS rating
(
    rating_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_name varchar(5) CHECK (rating_name IN ('G', 'PG', 'PG-13', 'R', 'NC-17'))
);

CREATE TABLE IF NOT EXISTS films
(
    film_id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_name VARCHAR NOT NULL,
    description VARCHAR(200),
    release   DATE    NOT NULL,
    duration  INT     NOT NULL,
    rating_id INT,
    CONSTRAINT date_is_after_1895_12_28 CHECK (release >= DATE '1895-12-28'),
    CONSTRAINT duration_is_longer_zero CHECK (duration > 0),
    CONSTRAINT fk_films_rating FOREIGN KEY (rating_id) REFERENCES rating (rating_id)
);

CREATE TABLE IF NOT EXISTS genre
(
    genre_id INT NOT NULL,
    film_id  INT NOT NULL,
    PRIMARY KEY (film_id, genre_id),
    CONSTRAINT fk_film_id FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE,
    CONSTRAINT fk_genre_id FOREIGN KEY (genre_id) REFERENCES genre_names (genre_id),
    CONSTRAINT unique_film UNIQUE (film_id, genre_id)
);
CREATE TABLE IF NOT EXISTS likes
(
    film_id INT REFERENCES films (film_id),
    user_id INT REFERENCES users (user_id),
    PRIMARY KEY (user_id, film_id)
)

